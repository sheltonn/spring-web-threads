<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--
        Scans the classpath for annotated components that will be auto-registered as Spring beans. By default, the
        Spring-provided @Component, @Repository, @Service, and @Controller stereotypes will be detected.

        This tag implies the effects of the 'annotation-config' tag, activating @Required, @Autowired, @PostConstruct,
        @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit annotations in the component classes, which is
        usually desired for autodetected components (without external configuration).

        A component scan results in new bean definition being registered; Spring's PropertyPlaceholderConfigurer will
        apply to those bean definitions just like to regular bean definitions, but it won't apply to the component scan
        settings themselves.
    -->
    <context:component-scan base-package="com.javaninja.spring.web.threads"/>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
          p:corePoolSize="5"
          p:maxPoolSize="5"
          p:waitForTasksToCompleteOnShutdown="true"/>
</beans>
